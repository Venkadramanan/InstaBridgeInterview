/*
** NOTE: This file is generated by Gulp and should not be edited directly!
** Any changes made directly to this file will be overwritten next time its asset group is processed by Gulp.
*/

selectOptionsEditor = function () {
  var initilize = function initilize(elemId, optionsData, defaultValue) {
    var keyId = 1;
    //Add Key ID
    optionsData = optionsData.map(function (x) {
      x.key = keyId;
      keyId++;
      return x;
    });
    var selectOptionsRow = {
      name: "select-options-row",
      template: "#select-options-row",
      props: ["option", "defaultValue"],
      data: function data() {
        return {
          partId: elemId
        };
      },
      methods: {
        remove: function remove() {
          this.$emit("remove-option", this.option);
        }
      },
      computed: {
        IsSelected: {
          get: function get() {
            if (!IsNullOrWhiteSpace(this.option.value)) {
              return this.option.value == this.defaultValue;
            } else {
              return this.option.text == this.defaultValue;
            }
          },
          set: function set(val) {
            if (val) {
              this.$emit("set-default", this.option);
            } else {
              this.$emit("set-default", null);
            }
          }
        },
        optionValue: {
          get: function get() {
            return this.option.value;
          },
          set: function set(val) {
            var isSelected = this.IsSelected;
            this.option.value = val;
            if (isSelected) {
              this.$emit("set-default", this.option);
            } else {
              this.$emit("reorder-option");
            }
          }
        },
        optionText: {
          get: function get() {
            return this.option.text;
          },
          set: function set(val) {
            var isSelected = this.IsSelected;
            this.option.text = val;
            if (isSelected) {
              this.$emit("set-default", this.option);
            } else {
              this.$emit("reorder-option");
            }
          }
        },
        optionCheck: {
          get: function get() {
            if (IsNullOrWhiteSpace(this.option.value)) {
              return this.option.text;
            } else {
              return this.option.value;
            }
          }
        }
      }
    };
    var selectOptionsTable = {
      name: "select-options-table",
      components: {
        selectOptionsRow: selectOptionsRow
      },
      template: "#select-options-table",
      props: ["data"],
      data: function data() {
        return {
          partId: elemId
        };
      },
      methods: {
        add: function add() {
          this.$emit("add-option");
        },
        onDragEnd: function onDragEnd() {
          this.$emit("reorder-option");
        }
      }
    };
    var selectOptionsModal = {
      name: "select-options-modal",
      template: "#select-options-modal",
      props: ["data", "showModal", "validOptions"],
      data: function data() {
        return {
          optionsFormattedList: "[]",
          partId: elemId,
          defaultValue: "",
          isValid: false,
          jsonOptions: []
        };
      },
      methods: {
        closeModal: function closeModal(save) {
          if (save) {
            this.$emit("modal-save", {
              options: this.jsonOptions,
              defaultValue: this.defaultValue
            });
          } else {
            this.$emit("modal-cancel");
          }
        },
        showStart: function showStart(params) {
          this.$refs.modal.classList.toggle('d-block');
          this.$refs.backdrop.classList.toggle('d-block');
        },
        showEnd: function showEnd(params) {
          this.$refs.modal.classList.toggle('show');
          this.$refs.backdrop.classList.toggle('show');
        }
      },
      watch: {
        showModal: function showModal(newval) {
          if (newval) {
            this.optionsFormattedList = JSON.stringify(this.validOptions, null, 2);
            this.defaultValue = this.data.defaultValue;
          } else {
            this.optionsFormattedList = "[]";
            this.defaultValue = "";
          }
        },
        optionsFormattedList: function optionsFormattedList(newval) {
          try {
            var parsed = JSON.parse(newval);
            if (!!newval && parsed instanceof Array) {
              this.jsonOptions = parsed;
              this.isValid = true;
            } else {
              this.isValid = false;
            }
          } catch (e) {
            this.isValid = false;
          }
        }
      }
    };
    new Vue({
      components: {
        selectOptionsTable: selectOptionsTable,
        selectOptionsModal: selectOptionsModal
      },
      data: function data() {
        return {
          state: {
            options: optionsData,
            defaultValue: defaultValue,
            partId: elemId
          },
          debounceTimeout: null,
          showModal: false
        };
      },
      el: "#" + elemId,
      methods: {
        cancelChanges: function cancelChanges() {
          this.showModal = false;
        },
        updateChanges: function updateChanges(changes) {
          this.state.options = changes.options.filter(function (y) {
            return !IsNullOrWhiteSpace(y.text);
          }).map(function (x) {
            x.key = keyId++;
            return x;
          });
          this.state.defaultValue = changes.defaultValue;
          this.showModal = false;
          this.debouncePreview();
        },
        setDefaultValue: function setDefaultValue(opt) {
          if (opt == null) {
            this.state.defaultValue = "";
          } else {
            if (!IsNullOrWhiteSpace(opt.value)) {
              this.state.defaultValue = opt.value;
            } else {
              this.state.defaultValue = opt.text;
            }
          }
          this.debouncePreview();
        },
        addOption: function addOption() {
          this.state.options.push({
            text: "",
            value: "",
            key: keyId++
          });
          this.debouncePreview();
        },
        removeOption: function removeOption(opt) {
          var index = this.state.options.findIndex(function (c) {
            return c.key == opt.key;
          });
          if (index > -1) {
            this.state.options.splice(index, 1);
            this.debouncePreview();
          }
        },
        reorderOption: function reorderOption(evt) {
          this.debouncePreview();
        },
        debouncePreview: function debouncePreview(params) {
          if (this.debounceTimeout) clearTimeout(this.debounceTimeout);
          this.debounceTimeout = setTimeout(function () {
            var previewEvent = new Event("contentpreview:render");
            document.dispatchEvent(previewEvent);
          }, 500);
        }
      },
      computed: {
        stringify: function stringify() {
          return JSON.stringify(this.validOptions);
        },
        validOptions: function validOptions() {
          return this.state.options.map(function (x) {
            return {
              text: x.text,
              value: x.value
            };
          }).filter(function (x) {
            return !IsNullOrWhiteSpace(x.text);
          });
        }
      }
    });
    function IsNullOrWhiteSpace(str) {
      return str == null || str.match(/^ *$/) !== null;
    }
  };
  var initilizeElement = function initilizeElement(id, options, value) {
    var wrapper = document.getElementById(id);
    if (wrapper != null) {
      initilize(id, options, value);
    }
  };
  var initilizeFieldType = function initilizeFieldType(wrapper) {
    var selectMenus = wrapper.getElementsByClassName('field-type-select-menu');
    for (var i = 0; i < selectMenus.length; i++) {
      var selectMenu = selectMenus[i];
      selectMenu.addEventListener('change', function (e) {
        var visibleForInputContainers = wrapper.getElementsByClassName('show-for-input');
        for (var _i = 0; _i < visibleForInputContainers.length; _i++) {
          var container = visibleForInputContainers[_i];
          if (e.target.value == 'reset' || e.target.value == 'submit' || e.target.value == 'hidden') {
            container.classList.add('d-none');
          } else {
            container.classList.remove('d-none');
          }
        }
      });
      selectMenu.dispatchEvent(new Event('change'));
    }
  };
  return {
    initilizeElement: initilizeElement,
    initilizeFieldType: initilizeFieldType
  };
}();
document.addEventListener('DOMContentLoaded', function () {
  var wrappers = document.getElementsByName('select-part-properties-wrapper');
  for (var i = 0; i < wrappers.length; i++) {
    var wrapper = wrappers[i];
    var fieldWrapper = wrapper.querySelector('.field-options-wrapper');
    if (fieldWrapper != null) {
      var initialDefaultValue = fieldWrapper.querySelector('.field-options-wrapper-initial-default-value');
      var initialOptions = fieldWrapper.querySelector('.field-options-wrapper-initial-options');
      selectOptionsEditor.initilizeElement(fieldWrapper.Id, initialOptions.innerHTML, initialDefaultValue.value);
    }
  }
  selectOptionsEditor.initilizeFieldType(document);
});