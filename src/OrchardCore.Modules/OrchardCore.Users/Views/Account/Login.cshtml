@using Microsoft.AspNetCore.Identity
@using OrchardCore.DisplayManagement.ModelBinding
@using OrchardCore.Entities
@using OrchardCore.Settings
@using OrchardCore.Users
@using OrchardCore.Users.Models

@inject SignInManager<IUser> SignInManager
@inject ISiteService SiteService
@inject UserManager<IUser> UserManager
@inject IDisplayManager<LoginForm> LoginFormDisplayManager
@inject IUpdateModelAccessor UpdateModelAccessor

@{
    ViewLayout = "Layout__Login";

    var loginProviders = (await SignInManager.GetExternalAuthenticationSchemesAsync()).ToList();
    var disableLocalLogin = (await SiteService.GetSiteSettingsAsync()).As<LoginSettings>().DisableLocalLogin;
}

<style asp-name="font-awesome" version="6"></style>

<div class="row">
    @if (!ViewContext.ModelState.IsValid)
    {
        <div class="col-12">
            <div asp-validation-summary="ModelOnly"></div>
        </div>
    }

    @if (!disableLocalLogin)
    {
        <div class="col-md-6 @(loginProviders.Count == 0 ? "offset-md-3" : string.Empty)">
            @await DisplayAsync(Model)
        </div>
    }

    @if (loginProviders.Count > 0)
    {
        <div class="col-md-6 @(disableLocalLogin ? "offset-md-3" : string.Empty)">
            <section>
                <h1 class="fs-4">@T["Use another service to log in"]</h1>
                <hr />
                <form asp-controller="Account" asp-action="ExternalLogin" asp-route-returnurl="@ViewData["ReturnUrl"]" method="post" class="form-horizontal no-multisubmit">
                    @foreach (var provider in loginProviders)
                    {
                        <button type="submit" class="btn btn-primary mb-1 @(!disableLocalLogin ? "w-100" : string.Empty)" name="provider" value="@provider.Name" title="@T["Log in using your {0} account", provider.DisplayName]">@provider.DisplayName</button>
                    }
                </form>
            </section>
        </div>
    }
</div>
