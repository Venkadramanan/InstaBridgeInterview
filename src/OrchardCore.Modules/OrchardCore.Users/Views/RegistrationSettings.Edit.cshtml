@using OrchardCore.Users.Models
@model RegistrationSettings

<style asp-name="codemirror"></style>
<script asp-name="codemirror" at="Foot"></script>
<script asp-name="codemirror-mode-javascript" at="Foot"></script>
<script asp-name="codemirror-addon-display-autorefresh" at="Foot"></script>
<script asp-name="codemirror-addon-mode-simple" at="Foot"></script>
<script asp-name="codemirror-addon-mode-multiplex" at="Foot"></script>
<script asp-name="codemirror-mode-xml" at="Foot"></script>

<div class="mb-3" asp-validation-class-for="UsersCanRegister">
    <label asp-for="UsersCanRegister" class="form-label">@T["Configure users registration."]</label>
    <select asp-for="UsersCanRegister" class="form-select">
        <option value="@UserRegistrationType.NoRegistration" selected="@(Model.UsersCanRegister == UserRegistrationType.NoRegistration)">@T["No Registration"]</option>
        <option value="@UserRegistrationType.AllowRegistration" selected="@(Model.UsersCanRegister == UserRegistrationType.AllowRegistration)">@T["Allow Registration"]</option>
        <option value="@UserRegistrationType.AllowOnlyExternalUsers" selected="@(Model.UsersCanRegister == UserRegistrationType.AllowOnlyExternalUsers)">@T["Allow Only External Users"]</option>
    </select>
    <span asp-validation-for="UsersCanRegister"></span>

    <div class="hint">
        <ul>
            <li>@T["when 'No Registration' is selected, no new users can register"]</li>
            <li>@T["when 'Allow Registration' is selected, a link is displayed to allow the users to register on the site. If there are external providers, once authenticated the user can register"]</li>
            <li>@T["when 'Allow Only External Users' is selected, only users authenticated with external providers can register on the site"]</li>
        </ul>
    </div>
</div>

<div class="mb-3" asp-validation-class-for="UsersMustValidateEmail">
    <div class="form-check">
        <input type="checkbox" class="form-check-input" asp-for="UsersMustValidateEmail" data-bs-toggle="collapse" data-bs-target="#warnEmailValidation" />
        <span asp-validation-for="UsersMustValidateEmail"></span>
        <label class="form-check-label" asp-for="UsersMustValidateEmail">@T["Users must verify their email address"]</label>
    </div>
</div>

<div class="alert alert-warning collapse" id="warnEmailValidation">@T["The users whose email address has not been confirmed will not be able to login or reset their password."]</div>

<div class="mb-3" asp-validation-class-for="UsersAreModerated">
    <div class="form-check">
        <input type="checkbox" class="form-check-input" asp-for="UsersAreModerated" />
        <span asp-validation-for="UsersAreModerated"></span>
        <label class="form-check-label" asp-for="UsersAreModerated">@T["Users must be approved before they can log in"]</label>
    </div>
</div>

<div class="mb-3" asp-validation-class-for="UseSiteTheme">
    <div class="form-check">
        <input type="checkbox" class="form-check-input" asp-for="UseSiteTheme" />
        <span asp-validation-for="UseSiteTheme"></span>
        <label class="form-check-label" asp-for="UseSiteTheme">@T["Use site theme for registration page"]</label>
        <span class="hint dashed">@T["Requires an active site theme."]</span>
    </div>
</div>

<h5 class="mb-3">@T["External Authentication"]<span class="hint dashed">@T["Settings when registering with external authentication providers"]</span></h5>

<div class="mb-3" asp-validation-class-for="UseScriptToGenerateUsername">
    <div class="form-check">
        <input type="checkbox" class="form-check-input" asp-for="UseScriptToGenerateUsername" />
        <span asp-validation-for="UseScriptToGenerateUsername"></span>
        <label class="form-check-label" asp-for="UseScriptToGenerateUsername">@T["Use a script to generate userName based on external provider claims"]</label>
        <span class="hint dashed">@T["If selected, any IExternalLoginEventHandlers defined in modules are not triggered"]</span>
    </div>
    <pre>
********************************************************************************************
* context          : {userName,loginProvider,externalClaims[]}                             *
* ======================================================================================== *
* -userName        : String                                                                *
* -loginProvider   : String                                                                *
* -externalClaims  : [{subject,issuer,originalIssuer,properties[],type,value,valueType}]   *
*  -subject        : String                                                                *
*  -issuer         : String                                                                *
*  -originalIssuer : String                                                                *
*  -properties     : [{key,value}]                                                         *
*   -key           : String                                                                *
*   -value         : String                                                                *
*  -type           : String                                                                *
*  -value          : String                                                                *
*  -valueType      : String                                                                *
* ======================================================================================== *
*    Description                                                                           *
* ---------------------------------------------------------------------------------------- *
*    Use the loginProvider and externalClaims properties of the context variable to        *
*    inspect who authenticated the user and with what claims. If you do not set the        *
*    context.userName property, a username will be generated.                              *
*                                                                                          *
********************************************************************************************
</pre>
</div>
<div class="mb-3" asp-validation-class-for="GenerateUsernameScript">
    <button type="button" class="btn btn-secondary mb-2" onclick="resetScript()">@T["Reset Script"]</button>
    <textarea asp-for="GenerateUsernameScript" rows="1" class="form-control content-preview-text"></textarea>
</div>

<div class="mb-3" asp-validation-class-for="NoUsernameForExternalUsers">
    <div class="form-check">
        <input type="checkbox" class="form-check-input" asp-for="NoUsernameForExternalUsers" data-external-registration />
        <span asp-validation-for="NoUsernameForExternalUsers"></span>
        <label class="form-check-label" asp-for="NoUsernameForExternalUsers">@T["Do not ask username"]</label>
        <span class="hint dashed">@T["When a new user logs in with an external provider, they are not required to provide a local username. You can customize how it works by providing an IExternalLoginEventHandler or writing a script."]</span>
    </div>
</div>
<div class="mb-3" asp-validation-class-for="NoEmailForExternalUsers">
    <div class="form-check">
        <input type="checkbox" class="form-check-input" asp-for="NoEmailForExternalUsers" data-external-registration />
        <span asp-validation-for="NoEmailForExternalUsers"></span>
        <label class="form-check-label" asp-for="NoEmailForExternalUsers">@T["Do not ask email address"]</label>
        <span class="hint dashed">@T["When a new user logs in with an external provider and the email claim is defined, they are not required to provide a local email address."]</span>
    </div>
</div>
<div class="mb-3" asp-validation-class-for="NoPasswordForExternalUsers">
    <div class="form-check">
        <input type="checkbox" class="form-check-input" asp-for="NoPasswordForExternalUsers" data-external-registration />
        <span asp-validation-for="NoPasswordForExternalUsers"></span>
        <label class="form-check-label" asp-for="NoPasswordForExternalUsers">@T["Do not create local password for external users"]</label>
        <span class="hint dashed">@T["When a new user logs in with an external provider, they are not required to provide a local password."]</span>
    </div>
</div>

<script at="Foot">
    //<![CDATA[
    function refresh(e) {
        var usersCanRegisterElement = document.getElementById("@Html.IdFor(m => m.UsersCanRegister)");
        var externalRegistrationInputs = $("input[data-external-registration]");

        if (usersCanRegisterElement.value == "NoRegistration") {
            externalRegistrationInputs.prop('disabled', true);
        } else {
            externalRegistrationInputs.prop('disabled', false);
        }
    }

    function resetScript(keepText) {
        var editor = $('#@Html.IdFor(x => x.GenerateUsernameScript)').data('editor');
        if (!keepText) {
            editor.doc.setValue(
                '/* Uncomment to map AzureAd\n' +
                '// Uncomment to output the context variable in the logs\n' +
                '// log("warning", JSON.stringify(context));\n' +
                'switch (context.loginProvider) {\n' +
                '    case "AzureAd":\n' +
                '        context.userName = "azad" + uuid();\n' +
                '        break;\n' +
                '    default:\n' +
                '        log("Warning", "Provider " + context.loginProvider + " was not handled");\n' +
                '        // Uncomment to generate a username as a uuid\n' +
                '        // context.userName = "u" + uuid();\n' +
                '        break;\n' +
                '}\n' +
                '*/\n'
            );
        }
    }

    window.onload = function () {
        refresh();

        $("#@Html.IdFor(m => m.UsersCanRegister)").change(function () {
            refresh();
        });

        var textArea = document.getElementById('@Html.IdFor(x => x.GenerateUsernameScript)');
        if (textArea == null) {
            return;
        }
        var editor = CodeMirror.fromTextArea(textArea, {
            autoRefresh: true,
            lineNumbers: true,
            styleActiveLine: true,
            matchBrackets: true,
            autoCloseTags: true,
            mode: "javascript"
        });
        $('#@Html.IdFor(x => x.GenerateUsernameScript)').data('editor', editor);
        resetScript(editor.doc.getValue() != '');
    };
    //]]>
</script>
